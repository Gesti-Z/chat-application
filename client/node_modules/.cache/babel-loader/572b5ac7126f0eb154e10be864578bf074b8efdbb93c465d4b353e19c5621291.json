{"ast":null,"code":"import { useChannelStateContext } from '../../../../context';\nimport { useEffect, useRef, useState } from 'react';\nimport { MESSAGE_LIST_MAIN_PANEL_CLASS } from '../../MessageListMainPanel';\nimport { UNREAD_MESSAGE_SEPARATOR_CLASS } from '../../UnreadMessagesSeparator';\nvar targetScrolledAboveVisibleContainerArea = function (element) {\n  var targetBottom = element.getBoundingClientRect().bottom;\n  return targetBottom < 0;\n};\nvar targetScrolledBelowVisibleContainerArea = function (element, container) {\n  var targetTop = element.getBoundingClientRect().top;\n  var containerBottom = container.getBoundingClientRect().top;\n  return targetTop > containerBottom;\n};\nexport var useUnreadMessagesNotification = function (_a) {\n  var isMessageListScrolledToBottom = _a.isMessageListScrolledToBottom,\n    showAlways = _a.showAlways,\n    unreadCount = _a.unreadCount;\n  var messages = useChannelStateContext('UnreadMessagesNotification').messages;\n  var _b = useState(false),\n    show = _b[0],\n    setShow = _b[1];\n  var isScrolledAboveTargetTop = useRef(false);\n  var intersectionObserverIsSupported = typeof IntersectionObserver !== 'undefined';\n  useEffect(function () {\n    if (!(unreadCount && intersectionObserverIsSupported)) {\n      setShow(false);\n      return;\n    }\n    var msgListPanel = document.querySelector(\".\".concat(MESSAGE_LIST_MAIN_PANEL_CLASS));\n    if (!msgListPanel) return;\n    var observedTarget = document.querySelector(\".\".concat(UNREAD_MESSAGE_SEPARATOR_CLASS));\n    if (!observedTarget) {\n      setShow(true);\n      return;\n    }\n    var scrolledBelowSeparator = targetScrolledAboveVisibleContainerArea(observedTarget);\n    var scrolledAboveSeparator = targetScrolledBelowVisibleContainerArea(observedTarget, msgListPanel);\n    setShow(showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator);\n    var observer = new IntersectionObserver(function (elements) {\n      if (!elements.length) return;\n      var _a = elements[0],\n        boundingClientRect = _a.boundingClientRect,\n        isIntersecting = _a.isIntersecting;\n      if (isIntersecting) {\n        setShow(false);\n        return;\n      }\n      var separatorIsAboveContainerTop = boundingClientRect.bottom < 0;\n      setShow(showAlways || separatorIsAboveContainerTop);\n      isScrolledAboveTargetTop.current = separatorIsAboveContainerTop;\n    }, {\n      root: msgListPanel\n    });\n    observer.observe(observedTarget);\n    return function () {\n      observer.disconnect();\n    };\n  }, [intersectionObserverIsSupported, isMessageListScrolledToBottom, messages, showAlways, unreadCount]);\n  useEffect(function () {\n    /**\n     * Handle situation when scrollToBottom is called from another component when the msg list is scrolled above the observed target (unread separator).\n     * The intersection observer is not triggered when Element.scrollTo() is called. So we end up in a situation when we are scrolled to the bottom\n     * and at the same time scrolled above the observed target.\n     */\n    if (unreadCount && isMessageListScrolledToBottom && isScrolledAboveTargetTop.current) {\n      setShow(true);\n      isScrolledAboveTargetTop.current = false;\n    }\n  }, [isMessageListScrolledToBottom, unreadCount]);\n  return {\n    show: show && intersectionObserverIsSupported\n  };\n};","map":{"version":3,"names":["useChannelStateContext","useEffect","useRef","useState","MESSAGE_LIST_MAIN_PANEL_CLASS","UNREAD_MESSAGE_SEPARATOR_CLASS","targetScrolledAboveVisibleContainerArea","element","targetBottom","getBoundingClientRect","bottom","targetScrolledBelowVisibleContainerArea","container","targetTop","top","containerBottom","useUnreadMessagesNotification","_a","isMessageListScrolledToBottom","showAlways","unreadCount","messages","_b","show","setShow","isScrolledAboveTargetTop","intersectionObserverIsSupported","IntersectionObserver","msgListPanel","document","querySelector","concat","observedTarget","scrolledBelowSeparator","scrolledAboveSeparator","observer","elements","length","boundingClientRect","isIntersecting","separatorIsAboveContainerTop","current","root","observe","disconnect"],"sources":["C:/Users/Gesti/Desktop/chat_application/client/node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useUnreadMessagesNotification.js"],"sourcesContent":["import { useChannelStateContext } from '../../../../context';\nimport { useEffect, useRef, useState } from 'react';\nimport { MESSAGE_LIST_MAIN_PANEL_CLASS } from '../../MessageListMainPanel';\nimport { UNREAD_MESSAGE_SEPARATOR_CLASS } from '../../UnreadMessagesSeparator';\nvar targetScrolledAboveVisibleContainerArea = function (element) {\n    var targetBottom = element.getBoundingClientRect().bottom;\n    return targetBottom < 0;\n};\nvar targetScrolledBelowVisibleContainerArea = function (element, container) {\n    var targetTop = element.getBoundingClientRect().top;\n    var containerBottom = container.getBoundingClientRect().top;\n    return targetTop > containerBottom;\n};\nexport var useUnreadMessagesNotification = function (_a) {\n    var isMessageListScrolledToBottom = _a.isMessageListScrolledToBottom, showAlways = _a.showAlways, unreadCount = _a.unreadCount;\n    var messages = useChannelStateContext('UnreadMessagesNotification').messages;\n    var _b = useState(false), show = _b[0], setShow = _b[1];\n    var isScrolledAboveTargetTop = useRef(false);\n    var intersectionObserverIsSupported = typeof IntersectionObserver !== 'undefined';\n    useEffect(function () {\n        if (!(unreadCount && intersectionObserverIsSupported)) {\n            setShow(false);\n            return;\n        }\n        var msgListPanel = document.querySelector(\".\".concat(MESSAGE_LIST_MAIN_PANEL_CLASS));\n        if (!msgListPanel)\n            return;\n        var observedTarget = document.querySelector(\".\".concat(UNREAD_MESSAGE_SEPARATOR_CLASS));\n        if (!observedTarget) {\n            setShow(true);\n            return;\n        }\n        var scrolledBelowSeparator = targetScrolledAboveVisibleContainerArea(observedTarget);\n        var scrolledAboveSeparator = targetScrolledBelowVisibleContainerArea(observedTarget, msgListPanel);\n        setShow(showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator);\n        var observer = new IntersectionObserver(function (elements) {\n            if (!elements.length)\n                return;\n            var _a = elements[0], boundingClientRect = _a.boundingClientRect, isIntersecting = _a.isIntersecting;\n            if (isIntersecting) {\n                setShow(false);\n                return;\n            }\n            var separatorIsAboveContainerTop = boundingClientRect.bottom < 0;\n            setShow(showAlways || separatorIsAboveContainerTop);\n            isScrolledAboveTargetTop.current = separatorIsAboveContainerTop;\n        }, { root: msgListPanel });\n        observer.observe(observedTarget);\n        return function () {\n            observer.disconnect();\n        };\n    }, [\n        intersectionObserverIsSupported,\n        isMessageListScrolledToBottom,\n        messages,\n        showAlways,\n        unreadCount,\n    ]);\n    useEffect(function () {\n        /**\n         * Handle situation when scrollToBottom is called from another component when the msg list is scrolled above the observed target (unread separator).\n         * The intersection observer is not triggered when Element.scrollTo() is called. So we end up in a situation when we are scrolled to the bottom\n         * and at the same time scrolled above the observed target.\n         */\n        if (unreadCount && isMessageListScrolledToBottom && isScrolledAboveTargetTop.current) {\n            setShow(true);\n            isScrolledAboveTargetTop.current = false;\n        }\n    }, [isMessageListScrolledToBottom, unreadCount]);\n    return { show: show && intersectionObserverIsSupported };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}