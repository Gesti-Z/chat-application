{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React, { Fragment } from 'react';\nimport { isDateSeparatorMessage } from './utils';\nimport { Message } from '../Message';\nimport { CUSTOM_MESSAGE_TYPE } from '../../constants/messageTypes';\nexport function defaultRenderMessages(_a) {\n  var channelUnreadUiState = _a.channelUnreadUiState,\n    components = _a.components,\n    customClasses = _a.customClasses,\n    lastReceivedId = _a.lastReceivedMessageId,\n    messageGroupStyles = _a.messageGroupStyles,\n    messages = _a.messages,\n    readData = _a.readData,\n    messageProps = _a.sharedMessageProps;\n  var DateSeparator = components.DateSeparator,\n    HeaderComponent = components.HeaderComponent,\n    MessageSystem = components.MessageSystem,\n    UnreadMessagesSeparator = components.UnreadMessagesSeparator;\n  var renderedMessages = [];\n  var firstMessage;\n  for (var index = 0; index < messages.length; index++) {\n    var message = messages[index];\n    if (isDateSeparatorMessage(message)) {\n      renderedMessages.push(React.createElement(\"li\", {\n        key: \"\".concat(message.date.toISOString(), \"-i\")\n      }, React.createElement(DateSeparator, {\n        date: message.date,\n        formatDate: messageProps.formatDate,\n        unread: message.unread\n      })));\n    } else if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {\n      renderedMessages.push(React.createElement(\"li\", {\n        key: 'intro'\n      }, React.createElement(HeaderComponent, null)));\n    } else if (message.type === 'system') {\n      renderedMessages.push(React.createElement(\"li\", {\n        key: message.id || message.created_at\n      }, React.createElement(MessageSystem, {\n        message: message\n      })));\n    } else {\n      if (!firstMessage) {\n        firstMessage = message;\n      }\n      var groupStyles = messageGroupStyles[message.id] || '';\n      var messageClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.message) || \"str-chat__li str-chat__li--\".concat(groupStyles);\n      var createdAtTimestamp = message.created_at && new Date(message.created_at).getTime();\n      var lastReadTimestamp = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read.getTime();\n      var isFirstMessage = (firstMessage === null || firstMessage === void 0 ? void 0 : firstMessage.id) && firstMessage.id === message.id;\n      var isNewestMessage = index === messages.length - 1;\n      var isLastReadMessage = (channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id) === message.id || !(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) && createdAtTimestamp === lastReadTimestamp;\n      var isFirstUnreadMessage = (channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id) === message.id || !!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) && !!createdAtTimestamp && !!lastReadTimestamp && createdAtTimestamp > lastReadTimestamp && isFirstMessage;\n      var showUnreadSeparatorAbove = !(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id) && isFirstUnreadMessage;\n      var showUnreadSeparatorBelow = isLastReadMessage && !isNewestMessage && ((channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id) || !!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages)); // this part has to be here as we do not mark channel read when sending a message\n      renderedMessages.push(React.createElement(Fragment, {\n        key: message.id || message.created_at\n      }, showUnreadSeparatorAbove && UnreadMessagesSeparator && React.createElement(\"li\", {\n        className: 'str-chat__li str-chat__unread-messages-separator-wrapper'\n      }, React.createElement(UnreadMessagesSeparator, {\n        unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages\n      })), React.createElement(\"li\", {\n        className: messageClass,\n        \"data-message-id\": message.id,\n        \"data-testid\": messageClass\n      }, React.createElement(Message, __assign({\n        groupStyles: [groupStyles],\n        lastReceivedId: lastReceivedId,\n        message: message,\n        readBy: readData[message.id] || []\n      }, messageProps))), showUnreadSeparatorBelow && UnreadMessagesSeparator && React.createElement(\"li\", {\n        className: 'str-chat__li str-chat__unread-messages-separator-wrapper'\n      }, React.createElement(UnreadMessagesSeparator, {\n        unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages\n      }))));\n    }\n  }\n  return renderedMessages;\n}","map":{"version":3,"names":["__assign","React","Fragment","isDateSeparatorMessage","Message","CUSTOM_MESSAGE_TYPE","defaultRenderMessages","_a","channelUnreadUiState","components","customClasses","lastReceivedId","lastReceivedMessageId","messageGroupStyles","messages","readData","messageProps","sharedMessageProps","DateSeparator","HeaderComponent","MessageSystem","UnreadMessagesSeparator","renderedMessages","firstMessage","index","length","message","push","createElement","key","concat","date","toISOString","formatDate","unread","customType","intro","type","id","created_at","groupStyles","messageClass","createdAtTimestamp","Date","getTime","lastReadTimestamp","last_read","isFirstMessage","isNewestMessage","isLastReadMessage","last_read_message_id","unread_messages","isFirstUnreadMessage","first_unread_message_id","showUnreadSeparatorAbove","showUnreadSeparatorBelow","className","unreadCount","readBy"],"sources":["C:/Users/Gesti/Desktop/chat_application/client/node_modules/stream-chat-react/dist/components/MessageList/renderMessages.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport React, { Fragment } from 'react';\nimport { isDateSeparatorMessage } from './utils';\nimport { Message } from '../Message';\nimport { CUSTOM_MESSAGE_TYPE } from '../../constants/messageTypes';\nexport function defaultRenderMessages(_a) {\n    var channelUnreadUiState = _a.channelUnreadUiState, components = _a.components, customClasses = _a.customClasses, lastReceivedId = _a.lastReceivedMessageId, messageGroupStyles = _a.messageGroupStyles, messages = _a.messages, readData = _a.readData, messageProps = _a.sharedMessageProps;\n    var DateSeparator = components.DateSeparator, HeaderComponent = components.HeaderComponent, MessageSystem = components.MessageSystem, UnreadMessagesSeparator = components.UnreadMessagesSeparator;\n    var renderedMessages = [];\n    var firstMessage;\n    for (var index = 0; index < messages.length; index++) {\n        var message = messages[index];\n        if (isDateSeparatorMessage(message)) {\n            renderedMessages.push(React.createElement(\"li\", { key: \"\".concat(message.date.toISOString(), \"-i\") },\n                React.createElement(DateSeparator, { date: message.date, formatDate: messageProps.formatDate, unread: message.unread })));\n        }\n        else if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {\n            renderedMessages.push(React.createElement(\"li\", { key: 'intro' },\n                React.createElement(HeaderComponent, null)));\n        }\n        else if (message.type === 'system') {\n            renderedMessages.push(React.createElement(\"li\", { key: message.id || message.created_at },\n                React.createElement(MessageSystem, { message: message })));\n        }\n        else {\n            if (!firstMessage) {\n                firstMessage = message;\n            }\n            var groupStyles = messageGroupStyles[message.id] || '';\n            var messageClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.message) || \"str-chat__li str-chat__li--\".concat(groupStyles);\n            var createdAtTimestamp = message.created_at && new Date(message.created_at).getTime();\n            var lastReadTimestamp = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read.getTime();\n            var isFirstMessage = (firstMessage === null || firstMessage === void 0 ? void 0 : firstMessage.id) && firstMessage.id === message.id;\n            var isNewestMessage = index === messages.length - 1;\n            var isLastReadMessage = (channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id) === message.id ||\n                (!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) && createdAtTimestamp === lastReadTimestamp);\n            var isFirstUnreadMessage = (channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id) === message.id ||\n                (!!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) &&\n                    !!createdAtTimestamp &&\n                    !!lastReadTimestamp &&\n                    createdAtTimestamp > lastReadTimestamp &&\n                    isFirstMessage);\n            var showUnreadSeparatorAbove = !(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id) && isFirstUnreadMessage;\n            var showUnreadSeparatorBelow = isLastReadMessage &&\n                !isNewestMessage &&\n                ((channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id) || !!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages)); // this part has to be here as we do not mark channel read when sending a message\n            renderedMessages.push(React.createElement(Fragment, { key: message.id || message.created_at },\n                showUnreadSeparatorAbove && UnreadMessagesSeparator && (React.createElement(\"li\", { className: 'str-chat__li str-chat__unread-messages-separator-wrapper' },\n                    React.createElement(UnreadMessagesSeparator, { unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages }))),\n                React.createElement(\"li\", { className: messageClass, \"data-message-id\": message.id, \"data-testid\": messageClass },\n                    React.createElement(Message, __assign({ groupStyles: [groupStyles], lastReceivedId: lastReceivedId, message: message, readBy: readData[message.id] || [] }, messageProps))),\n                showUnreadSeparatorBelow && UnreadMessagesSeparator && (React.createElement(\"li\", { className: 'str-chat__li str-chat__unread-messages-separator-wrapper' },\n                    React.createElement(UnreadMessagesSeparator, { unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages })))));\n        }\n    }\n    return renderedMessages;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}