{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useMemo } from 'react';\nimport { useLastReadData } from '../useLastReadData';\nimport { getLastReceived } from '../../utils';\nimport { useChatContext } from '../../../../context/ChatContext';\nimport { useComponentContext } from '../../../../context/ComponentContext';\nexport var useMessageListElements = function (props) {\n  var channelUnreadUiState = props.channelUnreadUiState,\n    enrichedMessages = props.enrichedMessages,\n    internalMessageProps = props.internalMessageProps,\n    messageGroupStyles = props.messageGroupStyles,\n    read = props.read,\n    renderMessages = props.renderMessages,\n    returnAllReadData = props.returnAllReadData,\n    threadList = props.threadList;\n  var _a = useChatContext('useMessageListElements'),\n    client = _a.client,\n    customClasses = _a.customClasses;\n  var components = useComponentContext('useMessageListElements');\n  // get the readData, but only for messages submitted by the user themselves\n  var readData = useLastReadData({\n    messages: enrichedMessages,\n    read: read,\n    returnAllReadData: returnAllReadData,\n    userID: client.userID\n  });\n  var lastReceivedMessageId = useMemo(function () {\n    return getLastReceived(enrichedMessages);\n  }, [enrichedMessages]);\n  var elements = useMemo(function () {\n    return renderMessages({\n      channelUnreadUiState: channelUnreadUiState,\n      components: components,\n      customClasses: customClasses,\n      lastReceivedMessageId: lastReceivedMessageId,\n      messageGroupStyles: messageGroupStyles,\n      messages: enrichedMessages,\n      readData: readData,\n      sharedMessageProps: __assign(__assign({}, internalMessageProps), {\n        threadList: threadList\n      })\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [enrichedMessages, internalMessageProps, lastReceivedMessageId, messageGroupStyles, channelUnreadUiState, readData, renderMessages, threadList]);\n  return elements;\n};","map":{"version":3,"names":["__assign","useMemo","useLastReadData","getLastReceived","useChatContext","useComponentContext","useMessageListElements","props","channelUnreadUiState","enrichedMessages","internalMessageProps","messageGroupStyles","read","renderMessages","returnAllReadData","threadList","_a","client","customClasses","components","readData","messages","userID","lastReceivedMessageId","elements","sharedMessageProps"],"sources":["C:/Users/Gesti/Desktop/chat_application/client/node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListElements.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { useMemo } from 'react';\nimport { useLastReadData } from '../useLastReadData';\nimport { getLastReceived } from '../../utils';\nimport { useChatContext } from '../../../../context/ChatContext';\nimport { useComponentContext } from '../../../../context/ComponentContext';\nexport var useMessageListElements = function (props) {\n    var channelUnreadUiState = props.channelUnreadUiState, enrichedMessages = props.enrichedMessages, internalMessageProps = props.internalMessageProps, messageGroupStyles = props.messageGroupStyles, read = props.read, renderMessages = props.renderMessages, returnAllReadData = props.returnAllReadData, threadList = props.threadList;\n    var _a = useChatContext('useMessageListElements'), client = _a.client, customClasses = _a.customClasses;\n    var components = useComponentContext('useMessageListElements');\n    // get the readData, but only for messages submitted by the user themselves\n    var readData = useLastReadData({\n        messages: enrichedMessages,\n        read: read,\n        returnAllReadData: returnAllReadData,\n        userID: client.userID,\n    });\n    var lastReceivedMessageId = useMemo(function () { return getLastReceived(enrichedMessages); }, [\n        enrichedMessages,\n    ]);\n    var elements = useMemo(function () {\n        return renderMessages({\n            channelUnreadUiState: channelUnreadUiState,\n            components: components,\n            customClasses: customClasses,\n            lastReceivedMessageId: lastReceivedMessageId,\n            messageGroupStyles: messageGroupStyles,\n            messages: enrichedMessages,\n            readData: readData,\n            sharedMessageProps: __assign(__assign({}, internalMessageProps), { threadList: threadList }),\n        });\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        enrichedMessages,\n        internalMessageProps,\n        lastReceivedMessageId,\n        messageGroupStyles,\n        channelUnreadUiState,\n        readData,\n        renderMessages,\n        threadList,\n    ]);\n    return elements;\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,eAAe,QAAQ,aAAa;AAC7C,SAASC,cAAc,QAAQ,iCAAiC;AAChE,SAASC,mBAAmB,QAAQ,sCAAsC;AAC1E,OAAO,IAAIC,sBAAsB,GAAG,SAAAA,CAAUC,KAAK,EAAE;EACjD,IAAIC,oBAAoB,GAAGD,KAAK,CAACC,oBAAoB;IAAEC,gBAAgB,GAAGF,KAAK,CAACE,gBAAgB;IAAEC,oBAAoB,GAAGH,KAAK,CAACG,oBAAoB;IAAEC,kBAAkB,GAAGJ,KAAK,CAACI,kBAAkB;IAAEC,IAAI,GAAGL,KAAK,CAACK,IAAI;IAAEC,cAAc,GAAGN,KAAK,CAACM,cAAc;IAAEC,iBAAiB,GAAGP,KAAK,CAACO,iBAAiB;IAAEC,UAAU,GAAGR,KAAK,CAACQ,UAAU;EACxU,IAAIC,EAAE,GAAGZ,cAAc,CAAC,wBAAwB,CAAC;IAAEa,MAAM,GAAGD,EAAE,CAACC,MAAM;IAAEC,aAAa,GAAGF,EAAE,CAACE,aAAa;EACvG,IAAIC,UAAU,GAAGd,mBAAmB,CAAC,wBAAwB,CAAC;EAC9D;EACA,IAAIe,QAAQ,GAAGlB,eAAe,CAAC;IAC3BmB,QAAQ,EAAEZ,gBAAgB;IAC1BG,IAAI,EAAEA,IAAI;IACVE,iBAAiB,EAAEA,iBAAiB;IACpCQ,MAAM,EAAEL,MAAM,CAACK;EACnB,CAAC,CAAC;EACF,IAAIC,qBAAqB,GAAGtB,OAAO,CAAC,YAAY;IAAE,OAAOE,eAAe,CAACM,gBAAgB,CAAC;EAAE,CAAC,EAAE,CAC3FA,gBAAgB,CACnB,CAAC;EACF,IAAIe,QAAQ,GAAGvB,OAAO,CAAC,YAAY;IAC/B,OAAOY,cAAc,CAAC;MAClBL,oBAAoB,EAAEA,oBAAoB;MAC1CW,UAAU,EAAEA,UAAU;MACtBD,aAAa,EAAEA,aAAa;MAC5BK,qBAAqB,EAAEA,qBAAqB;MAC5CZ,kBAAkB,EAAEA,kBAAkB;MACtCU,QAAQ,EAAEZ,gBAAgB;MAC1BW,QAAQ,EAAEA,QAAQ;MAClBK,kBAAkB,EAAEzB,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEU,oBAAoB,CAAC,EAAE;QAAEK,UAAU,EAAEA;MAAW,CAAC;IAC/F,CAAC,CAAC;EACN,CAAC;EACD;EACA,CACIN,gBAAgB,EAChBC,oBAAoB,EACpBa,qBAAqB,EACrBZ,kBAAkB,EAClBH,oBAAoB,EACpBY,QAAQ,EACRP,cAAc,EACdE,UAAU,CACb,CAAC;EACF,OAAOS,QAAQ;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}