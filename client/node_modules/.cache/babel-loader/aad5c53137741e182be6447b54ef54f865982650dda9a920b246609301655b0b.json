{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport { MESSAGE_ACTIONS } from '../Message/utils';\nimport { useChannelActionContext, useComponentContext, useMessageContext, useTranslationContext } from '../../context';\nimport { CustomMessageActionsList as DefaultCustomMessageActionsList } from './CustomMessageActionsList';\nvar UnMemoizedMessageActionsBox = React.forwardRef(function (props, ref) {\n  var getMessageActions = props.getMessageActions,\n    handleDelete = props.handleDelete,\n    handleEdit = props.handleEdit,\n    handleFlag = props.handleFlag,\n    handleMarkUnread = props.handleMarkUnread,\n    handleMute = props.handleMute,\n    handlePin = props.handlePin,\n    isUserMuted = props.isUserMuted,\n    mine = props.mine,\n    _a = props.open,\n    open = _a === void 0 ? false : _a,\n    restDivProps = __rest(props, [\"getMessageActions\", \"handleDelete\", \"handleEdit\", \"handleFlag\", \"handleMarkUnread\", \"handleMute\", \"handlePin\", \"isUserMuted\", \"mine\", \"open\"]);\n  var _b = useComponentContext('MessageActionsBox').CustomMessageActionsList,\n    CustomMessageActionsList = _b === void 0 ? DefaultCustomMessageActionsList : _b;\n  var setQuotedMessage = useChannelActionContext('MessageActionsBox').setQuotedMessage;\n  var _c = useMessageContext('MessageActionsBox'),\n    customMessageActions = _c.customMessageActions,\n    message = _c.message,\n    threadList = _c.threadList;\n  var t = useTranslationContext('MessageActionsBox').t;\n  var messageActions = getMessageActions();\n  var handleQuote = function () {\n    setQuotedMessage(message);\n    var elements = message.parent_id ? document.querySelectorAll('.str-chat__thread .str-chat__textarea__textarea') : document.getElementsByClassName('str-chat__textarea__textarea');\n    var textarea = elements.item(0);\n    if (textarea instanceof HTMLTextAreaElement) {\n      textarea.focus();\n    }\n  };\n  var rootClassName = clsx('str-chat__message-actions-box', {\n    'str-chat__message-actions-box--open': open\n  });\n  var buttonClassName = 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button';\n  return React.createElement(\"div\", __assign({}, restDivProps, {\n    className: rootClassName,\n    \"data-testid\": 'message-actions-box',\n    ref: ref\n  }), React.createElement(\"div\", {\n    \"aria-label\": t('aria/Message Options'),\n    className: 'str-chat__message-actions-list',\n    role: 'listbox'\n  }, React.createElement(CustomMessageActionsList, {\n    customMessageActions: customMessageActions,\n    message: message\n  }), messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleQuote,\n    role: 'option'\n  }, t('Reply')), messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handlePin,\n    role: 'option'\n  }, !message.pinned ? t('Pin') : t('Unpin')), messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1 && !threadList && !!message.id && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleMarkUnread,\n    role: 'option'\n  }, t('Mark as unread')), messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleFlag,\n    role: 'option'\n  }, t('Flag')), messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleMute,\n    role: 'option'\n  }, isUserMuted() ? t('Unmute') : t('Mute')), messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleEdit,\n    role: 'option'\n  }, t('Edit Message')), messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleDelete,\n    role: 'option'\n  }, t('Delete'))));\n});\n/**\n * A popup box that displays the available actions on a message, such as edit, delete, pin, etc.\n */\nexport var MessageActionsBox = React.memo(UnMemoizedMessageActionsBox);","map":{"version":3,"names":["__assign","__rest","React","clsx","MESSAGE_ACTIONS","useChannelActionContext","useComponentContext","useMessageContext","useTranslationContext","CustomMessageActionsList","DefaultCustomMessageActionsList","UnMemoizedMessageActionsBox","forwardRef","props","ref","getMessageActions","handleDelete","handleEdit","handleFlag","handleMarkUnread","handleMute","handlePin","isUserMuted","mine","_a","open","restDivProps","_b","setQuotedMessage","_c","customMessageActions","message","threadList","t","messageActions","handleQuote","elements","parent_id","document","querySelectorAll","getElementsByClassName","textarea","item","HTMLTextAreaElement","focus","rootClassName","buttonClassName","createElement","className","role","indexOf","quote","onClick","pin","pinned","markUnread","id","flag","mute","edit","delete","MessageActionsBox","memo"],"sources":["C:/Users/Gesti/Desktop/chat_application/client/node_modules/stream-chat-react/dist/components/MessageActions/MessageActionsBox.js"],"sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport { MESSAGE_ACTIONS } from '../Message/utils';\nimport { useChannelActionContext, useComponentContext, useMessageContext, useTranslationContext, } from '../../context';\nimport { CustomMessageActionsList as DefaultCustomMessageActionsList } from './CustomMessageActionsList';\nvar UnMemoizedMessageActionsBox = React.forwardRef(function (props, ref) {\n    var getMessageActions = props.getMessageActions, handleDelete = props.handleDelete, handleEdit = props.handleEdit, handleFlag = props.handleFlag, handleMarkUnread = props.handleMarkUnread, handleMute = props.handleMute, handlePin = props.handlePin, isUserMuted = props.isUserMuted, mine = props.mine, _a = props.open, open = _a === void 0 ? false : _a, restDivProps = __rest(props, [\"getMessageActions\", \"handleDelete\", \"handleEdit\", \"handleFlag\", \"handleMarkUnread\", \"handleMute\", \"handlePin\", \"isUserMuted\", \"mine\", \"open\"]);\n    var _b = useComponentContext('MessageActionsBox').CustomMessageActionsList, CustomMessageActionsList = _b === void 0 ? DefaultCustomMessageActionsList : _b;\n    var setQuotedMessage = useChannelActionContext('MessageActionsBox').setQuotedMessage;\n    var _c = useMessageContext('MessageActionsBox'), customMessageActions = _c.customMessageActions, message = _c.message, threadList = _c.threadList;\n    var t = useTranslationContext('MessageActionsBox').t;\n    var messageActions = getMessageActions();\n    var handleQuote = function () {\n        setQuotedMessage(message);\n        var elements = message.parent_id\n            ? document.querySelectorAll('.str-chat__thread .str-chat__textarea__textarea')\n            : document.getElementsByClassName('str-chat__textarea__textarea');\n        var textarea = elements.item(0);\n        if (textarea instanceof HTMLTextAreaElement) {\n            textarea.focus();\n        }\n    };\n    var rootClassName = clsx('str-chat__message-actions-box', {\n        'str-chat__message-actions-box--open': open,\n    });\n    var buttonClassName = 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button';\n    return (React.createElement(\"div\", __assign({}, restDivProps, { className: rootClassName, \"data-testid\": 'message-actions-box', ref: ref }),\n        React.createElement(\"div\", { \"aria-label\": t('aria/Message Options'), className: 'str-chat__message-actions-list', role: 'listbox' },\n            React.createElement(CustomMessageActionsList, { customMessageActions: customMessageActions, message: message }),\n            messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleQuote, role: 'option' }, t('Reply'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handlePin, role: 'option' }, !message.pinned ? t('Pin') : t('Unpin'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1 && !threadList && !!message.id && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleMarkUnread, role: 'option' }, t('Mark as unread'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleFlag, role: 'option' }, t('Flag'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleMute, role: 'option' }, isUserMuted() ? t('Unmute') : t('Mute'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleEdit, role: 'option' }, t('Edit Message'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleDelete, role: 'option' }, t('Delete'))))));\n});\n/**\n * A popup box that displays the available actions on a message, such as edit, delete, pin, etc.\n */\nexport var MessageActionsBox = React.memo(UnMemoizedMessageActionsBox);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}